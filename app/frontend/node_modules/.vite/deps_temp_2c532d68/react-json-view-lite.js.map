{
  "version": 3,
  "sources": ["../../react-json-view-lite/src/DataTypeDetection.ts", "../../react-json-view-lite/src/hooks.ts", "../../react-json-view-lite/src/DataRenderer.tsx", "../../react-json-view-lite/src/index.tsx"],
  "sourcesContent": ["export const isBoolean = (data: any) => {\n  return typeof data === 'boolean' || data instanceof Boolean;\n};\n\nexport const isNumber = (data: any) => {\n  return typeof data === 'number' || data instanceof Number;\n};\n\nexport const isBigInt = (data: any) => {\n  return typeof data === 'bigint' || data instanceof BigInt;\n};\n\nexport const isString = (data: any) => {\n  return typeof data === 'string' || data instanceof String;\n};\n\nexport const isArray = (data: any) => {\n  return Array.isArray(data);\n};\n\nexport const isObject = (data: any) => {\n  return data instanceof Object && data !== null;\n};\n\nexport const isNull = (data: any) => {\n  return data === null;\n};\n\nexport const isUndefined = (data: any) => {\n  return data === undefined;\n};\n", "import { useState } from 'react';\n\nexport function useBool(\n  initialValueCreator: () => boolean\n): [boolean, () => void, (value: boolean) => void] {\n  const [value, setValue] = useState(initialValueCreator());\n\n  const tooggle = () => setValue((currentValue) => !currentValue);\n\n  return [value, tooggle, setValue];\n}\n", "import * as React from 'react';\nimport * as DataTypeDetection from './DataTypeDetection';\nimport { useBool } from './hooks';\n\nconst expandedIcon = '\\u25BE';\nconst collapsedIcon = '\\u25B8';\n\nexport interface StyleProps {\n  container: string;\n  basicChildStyle: string;\n  expander: string;\n  label: string;\n  nullValue: string;\n  undefinedValue: string;\n  numberValue: string;\n  stringValue: string;\n  booleanValue: string;\n  otherValue: string;\n  punctuation: string;\n  pointer: string;\n}\n\nexport interface JsonRenderProps<T> {\n  field?: string;\n  value: T;\n  lastElement: boolean;\n  level: number;\n  style: StyleProps;\n  shouldInitiallyExpand: (level: number, value: any, field?: string) => boolean;\n}\n\nexport interface ExpandableRenderProps {\n  field?: string;\n  value: Array<any> | object;\n  data: Array<[string | undefined, any]>;\n  openBracket: string;\n  closeBracket: string;\n  lastElement: boolean;\n  level: number;\n  style: StyleProps;\n  shouldInitiallyExpand: (level: number, value: any, field?: string) => boolean;\n}\n\nfunction combineStyles(style1: string, style2: string): string {\n  return `${style1 || ''} ${style2 || ''}`;\n}\n\nfunction renderExpandableObject({\n  field,\n  value,\n  data,\n  lastElement,\n  openBracket,\n  closeBracket,\n  level,\n  style,\n  shouldInitiallyExpand\n}: ExpandableRenderProps) {\n  const shouldInitiallyExpandCalledRef = React.useRef(false);\n  const [expanded, toggleExpanded, setExpanded] = useBool(() =>\n    shouldInitiallyExpand(level, value, field)\n  );\n\n  React.useEffect(() => {\n    if (!shouldInitiallyExpandCalledRef.current) {\n      shouldInitiallyExpandCalledRef.current = true;\n    } else {\n      setExpanded(shouldInitiallyExpand(level, value, field));\n    }\n  }, [shouldInitiallyExpand]);\n\n  const expandIcon = expanded ? expandedIcon : collapsedIcon;\n  const childLevel = level + 1;\n  const lastIndex = data.length - 1;\n\n  const onKeyDown = (e: React.KeyboardEvent<HTMLSpanElement>) => {\n    if (e.key === ' ') {\n      toggleExpanded();\n    }\n  };\n\n  return (\n    <div className={style.basicChildStyle} role='list'>\n      <span\n        className={combineStyles(style.expander, style.pointer)}\n        role='button'\n        onClick={toggleExpanded}\n        onKeyDown={onKeyDown}\n        tabIndex={0}\n      >\n        {expandIcon}\n      </span>\n      {field && <span className={style.label}>{field}:</span>}\n      <span className={style.punctuation}>{openBracket}</span>\n\n      {expanded ? (\n        <div>\n          {data.map((dataElement, index) => (\n            <DataRender\n              key={dataElement[0] || index}\n              field={dataElement[0]}\n              value={dataElement[1]}\n              style={style}\n              lastElement={index === lastIndex}\n              level={childLevel}\n              shouldInitiallyExpand={shouldInitiallyExpand}\n            />\n          ))}\n        </div>\n      ) : (\n        <span\n          className={combineStyles(style.punctuation, style.pointer)}\n          role='button'\n          tabIndex={0}\n          onClick={toggleExpanded}\n          onKeyDown={onKeyDown}\n        >\n          ...\n        </span>\n      )}\n\n      <span className={style.punctuation}>{closeBracket}</span>\n      {!lastElement && <span className={style.punctuation}>,</span>}\n    </div>\n  );\n}\n\nfunction JsonObject({\n  field,\n  value,\n  style,\n  lastElement,\n  shouldInitiallyExpand,\n  level\n}: JsonRenderProps<Object>) {\n  return renderExpandableObject({\n    field,\n    value,\n    lastElement: lastElement || false,\n    level,\n    openBracket: '{',\n    closeBracket: '}',\n    style,\n    shouldInitiallyExpand,\n    data: Object.keys(value).map((key) => [key, value[key]])\n  });\n}\n\nfunction JsonArray({\n  field,\n  value,\n  style,\n  lastElement,\n  level,\n  shouldInitiallyExpand\n}: JsonRenderProps<Array<any>>) {\n  return renderExpandableObject({\n    field,\n    value,\n    lastElement: lastElement || false,\n    level,\n    openBracket: '[',\n    closeBracket: ']',\n    style,\n    shouldInitiallyExpand,\n    data: value.map((element) => [undefined, element])\n  });\n}\n\nfunction JsonPrimitiveValue({\n  field,\n  value,\n  style,\n  lastElement\n}: JsonRenderProps<string | number | boolean | null | undefined>) {\n  let stringValue = value;\n  let valueStyle = style.otherValue;\n\n  if (value === null) {\n    stringValue = 'null';\n    valueStyle = style.nullValue;\n  } else if (value === undefined) {\n    stringValue = 'undefined';\n    valueStyle = style.undefinedValue;\n  } else if (DataTypeDetection.isString(value)) {\n    stringValue = `\"${value}\"`;\n    valueStyle = style.stringValue;\n  } else if (DataTypeDetection.isBoolean(value)) {\n    stringValue = value ? 'true' : 'false';\n    valueStyle = style.booleanValue;\n  } else if (DataTypeDetection.isNumber(value)) {\n    stringValue = value.toString();\n    valueStyle = style.numberValue;\n  } else if (DataTypeDetection.isBigInt(value)) {\n    stringValue = `${value.toString()}n`;\n    valueStyle = style.numberValue;\n  } else {\n    stringValue = value.toString();\n  }\n\n  return (\n    <div className={style.basicChildStyle} role='listitem'>\n      {field && <span className={style.label}>{field}:</span>}\n      <span className={valueStyle}>{stringValue}</span>\n      {!lastElement && <span className={style.punctuation}>,</span>}\n    </div>\n  );\n}\n\nexport default function DataRender(props: JsonRenderProps<any>) {\n  const value = props.value;\n  if (DataTypeDetection.isArray(value)) {\n    return <JsonArray {...props} />;\n  }\n\n  if (DataTypeDetection.isObject(value)) {\n    return <JsonObject {...props} />;\n  }\n\n  return <JsonPrimitiveValue {...props} />;\n}\n", "import * as React from 'react';\nimport DataRender, { StyleProps } from './DataRenderer';\nimport styles from './styles.module.css';\n\nexport interface Props {\n  data: Object | Array<any>;\n  style?: StyleProps;\n  shouldInitiallyExpand?: (level: number, value: any, field?: string) => boolean;\n}\n\nexport const defaultStyles: StyleProps = {\n  container: styles['container-light'],\n  basicChildStyle: styles['basic-element-style'],\n  label: styles['label-light'],\n  nullValue: styles['value-null-light'],\n  undefinedValue: styles['value-undefined-light'],\n  stringValue: styles['value-string-light'],\n  booleanValue: styles['value-boolean-light'],\n  numberValue: styles['value-number-light'],\n  otherValue: styles['value-other-light'],\n  expander: styles['expander-light'],\n  punctuation: styles['punctuation-light'],\n  pointer: styles.pointer\n};\n\nexport const darkStyles: StyleProps = {\n  container: styles['container-dark'],\n  basicChildStyle: styles['basic-element-style'],\n  label: styles['label-dark'],\n  nullValue: styles['value-null-dark'],\n  undefinedValue: styles['value-undefined-dark'],\n  stringValue: styles['value-string-dark'],\n  booleanValue: styles['value-boolean-dark'],\n  numberValue: styles['value-number-dark'],\n  otherValue: styles['value-other-dark'],\n  expander: styles['expander-dark'],\n  punctuation: styles['punctuation-dark'],\n  pointer: styles.pointer\n};\n\nexport const allExpanded = () => true;\nexport const collapseAllNested = (level: number) => level < 1;\n\nexport const JsonView = ({\n  data,\n  style = defaultStyles,\n  shouldInitiallyExpand = allExpanded\n}: Props) => {\n  return (\n    <div className={style.container}>\n      <DataRender\n        value={data}\n        style={style}\n        lastElement\n        level={0}\n        shouldInitiallyExpand={shouldInitiallyExpand}\n      />\n    </div>\n  );\n};\n"],
  "mappings": "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",
  "names": ["isBoolean", "data", "Boolean", "isNumber", "Number", "isBigInt", "BigInt", "isString", "String", "isArray", "Array", "isObject", "Object", "useBool", "initialValueCreator", "useState", "value", "setValue", "tooggle", "currentValue", "expandedIcon", "collapsedIcon", "combineStyles", "style1", "style2", "renderExpandableObject", "field", "lastElement", "openBracket", "closeBracket", "level", "style", "shouldInitiallyExpand", "shouldInitiallyExpandCalledRef", "React", "expanded", "toggleExpanded", "setExpanded", "current", "expandIcon", "childLevel", "lastIndex", "length", "onKeyDown", "e", "key", "className", "basicChildStyle", "role", "expander", "pointer", "onClick", "tabIndex", "label", "punctuation", "map", "dataElement", "index", "DataRender", "JsonObject", "keys", "JsonArray", "element", "undefined", "JsonPrimitiveValue", "stringValue", "valueStyle", "otherValue", "nullValue", "undefinedValue", "DataTypeDetection", "booleanValue", "toString", "numberValue", "props", "defaultStyles", "container", "styles", "darkStyles", "allExpanded", "collapseAllNested", "JsonView"]
}
